<?php

use Drupal\quizz\Entity\QuizEntity;
use Drupal\quizz\Entity\Result;
use Drupal\quizz_text\LongAnswerResponse;

require_once dirname(__FILE__) . '/quizz_text.hooks.inc';

/**
 * Validate the long_answer config form values
 */
function long_answer_config_validate($form, $form_state) {
  if ($form_state['values']['long_answer_default_max_score'] <= 0) {
    form_set_error('long_answer_default_max_score', t('The default max score must be greater than 0'));
  }
}

/**
 * Set a score for a long answer question.
 *
 * This stores a score for a long answer question and marks that question as
 * having been evaluated.
 *
 * The function updates all of the necessary data sources so that the individual
 * answer results should be reflected in the total scoring table.
 *
 * @param Result $result
 * @param QuizEntity $quiz
 * @param int $qid       ID of question.
 * @param int $vid       Version ID of question.
 * @param $score         The numeric score to assign the result.
 * @param $update_total  Shall the total score be updated?
 *
 * @return int
 *  Number of scores adjusted. If a change was made, this should be 1.
 */
function long_answer_score_an_answer(Result $result, $values, $update_total = TRUE) {
  extract($values);

  // Quiz scoring information is spread out across three tables:
  // 1. The module should retain its own scoring information in any case where scoring is non-trivial.
  // 2. The Quiz moduleretains a limited amount of scoring information.
  // 3. The Quiz module retains an overall score for a quiz. This is the percentage score for the combination of all
  //    questions on the quiz.
  //
  // We update all three.
  // First, we update the long answer table
  $question_max_score = db_query('SELECT max_score FROM {quiz_question_revision} WHERE qid = :qid AND vid = :vid', array(':qid' => $qid, ':vid' => $vid))->FetchField();
  $quiz_max_score = db_query('SELECT max_score FROM {quiz_relationship} WHERE quiz_vid = :pvid AND question_vid = :cvid', array(':pvid' => $quiz->vid, ':cvid' => $vid))->fetchField();

  $changed = db_update('quiz_long_answer_user_answers')
    ->fields(array(
        'score'                  => $score * $question_max_score / $quiz_max_score,
        'is_evaluated'           => 1,
        'answer_feedback'        => isset($answer_feedback['value']) ? $answer_feedback['value'] : '',
        'answer_feedback_format' => empty($answer_feedback['format']) ? '' : $answer_feedback['format'],
    ))
    ->condition('question_qid', $qid)
    ->condition('question_vid', $vid)
    ->condition('result_id', $result->result_id)
    ->execute();
  if ($changed > 0) {
    // Second, we update the main quiz answers table
    // What do we do about the quiz_results_answers table? It assumes strict
    // bivalence (is_correct). I guess we consider any essay with over 50% to be correct?
    $max = db_query('SELECT max_score FROM {quiz_question_revision} WHERE vid = :vid', array(':vid' => $vid))->fetchField();
    if ($max <= 0) {
      $is_correct = 0;
      $points_awarded = 0;
    }
    else {
      $is_correct = $score == $max ? 1 : 0;
      $points_awarded = $score;
    }

    db_update('quiz_results_answers')
      ->fields(array(
          'points_awarded' => $points_awarded,
          'is_correct'     => $is_correct,
      ))
      ->condition('question_vid', $vid)
      ->condition('result_id', $result->result_id)
      ->execute();

    // Third, we update the main quiz results table
    if ($update_total) {
      quizz_result_controller()->getScoreIO()->updateTotalScore($result);
    }
  }

  return $changed;
}

/**
 * Get the answer for a question.
 *
 * This stores a score for a long answer question and marks that question as having been evaluated.
 * @param int $question_qid
 * @param int $question_vid
 * @param int $result_id
 * @return array
 *  An array if successful, or FALSE if no result could be found. The array contains the following properties:
 *  <code>
 *  answer_id; // The answer ID
 *  answer; // The full text of the answer
 *  is_evaluated; // 0 if the question has not been evaluated, 1 if it has
 *  score; // The score the evaluator gave the user; this should be 0 if is_evaluated is 0.
 *  question_vid
 *  question_qid
 *  result_id
 *  </code>
 */
function long_answer_get_answer($question_qid, $question_vid, $result_id) {
  $result = db_query('
    SELECT answer_id, answer, la.is_evaluated, la.score, question_vid, question_qid, la.result_id, la.answer_feedback, la.answer_feedback_format, rel.max_score AS rel_max_score
    FROM {quiz_long_answer_user_answers} la
    JOIN {quiz_results} qnr ON (la.result_id = qnr.result_id)
    JOIN {quiz_relationship} rel ON (qnr.quiz_vid = rel.quiz_vid AND rel.question_vid = la.question_vid)
    WHERE question_qid = :question_id AND question_vid = :question_vid AND la.result_id = :rid', array(
      ':question_id'  => $question_qid,
      ':question_vid' => $question_vid,
      ':rid'          => $result_id))->fetchAssoc();
  return $result ? $result : FALSE;
}

/**
 * Given a quiz, return a list of all the unscored answers.
 *
 * @param int $question_qid
 * @param int $question_vid
 * @param $count
 *  Number of items to return (default: 50).
 * @param $offset
 *  Where in the results we should start (default: 0).
 *
 * @return
 *  Indexed array of result IDs that need to be scored.
 */
function long_answer_get_unscored_answers_by_question($question_qid, $question_vid, $count = 50, $offset = 0) {
  $results = db_query('SELECT result_id FROM {quiz_long_answer_user_answers}
    WHERE is_evaluated = :is_evaluated AND question_qid = :question_qid AND question_vid = :question_vid', array(
      ':is_evaluated' => 0,
      ':question_qid' => $question_qid,
      ':question_vid' => $question_vid
  ));

  $unscored = array();
  foreach ($results as $result) {
    $unscored[] = $result->result_id;
  }
  return $unscored;
}

/**
 * Get all quiz scores that have not yet been evaluated.
 *
 * @param $count
 *  Number of items to return (default: 50).
 * @param $offset
 *  Where in the results we should start (default: 0).
 *
 * @return
 *  Array of objects describing unanswered questions. Each object will have result_id, question_qid, and question_vid.
 */
function long_answer_get_all_unscored_answers($count = 50, $offset = 0) {
  $unscored = LongAnswerResponse::fetchAllUnscoredAnswers();
  return $unscored;
}

/**
 * Submit function for the report form
 *
 * @param $values
 *   The FAPI $form_state['values']
 */
function long_answer_report_submit($values) {
  $result = quizz_result_load($values['result_id']);
  long_answer_score_an_answer($result, $values, FALSE);
}

/**
 * Validate the long_answer config form values
 */
function short_answer_config_validate($form, $form_state) {
  if ($form_state['values']['short_answer_default_max_score'] <= 0) {
    form_set_error('short_answer_default_max_score', t('The default max score must be greater than 0'));
  }
}

/**
 * Set a score for a short answer question.
 *
 * This stores a score for a short answer question and marks that question as having been evaluated.
 * The function updates all of the necessary data sources so that the individual answer results should be
 * reflected in the total scoring table.
 *
 * @param Result $result
 * @param QuizEntity $quiz
 * @param int $qid      Question ID
 * @param int $vid      Question VID
 * @param $score        The numeric score to assign the result.
 * @param $update_total Shall the total score for a quiz be updated?
 * @return int          Number of scores adjusted. If a change was made, this should be 1.
 */
function short_answer_score_an_answer(Result $result, $values, $update_total = TRUE) {
  extract($values);

  // When we set the score we make sure that the max score in the quiz the
  // question belongs to is considered
  $question_max_score = db_query(
    'SELECT max_score '
    . ' FROM {quiz_question_revision} '
    . ' WHERE vid = :vid', array(':vid' => $vid))->FetchField();

  $quiz_max_score = db_query(
    'SELECT max_score '
    . ' FROM {quiz_relationship} '
    . ' WHERE quiz_vid = :pvid AND question_vid = :cvid', array(
      ':pvid' => $quiz->vid,
      ':cvid' => $vid))->fetchField();

  $changed = db_update('quiz_short_answer_user_answers')
    ->fields(array(
        'score'                  => $score * $question_max_score / $quiz_max_score,
        'is_evaluated'           => 1,
        'answer_feedback'        => empty($answer_feedback['value']) ? '' : $answer_feedback['value'],
        'answer_feedback_format' => empty($answer_feedback['format']) ? '' : $answer_feedback['format'],
    ))
    ->condition('question_vid', $vid)
    ->condition('result_id', $result->result_id)
    ->execute();

  // Now the short answer user data has been updated. We also need to update the
  // data in the quiz tables
  if ($changed > 0) {
    $max = db_query('SELECT max_score'
      . ' FROM {quiz_question_revision} '
      . ' WHERE vid = :vid', array(':vid' => $vid))->fetchField();
    if ($max <= 0) {
      $is_correct = 0;
      $points_awarded = 0;
    }
    else {
      $is_correct = ($score / $max > 0.5) ? 1 : 0;
      $points_awarded = $score;
    }

    db_update('quiz_results_answers')
      ->fields(array(
          'points_awarded' => $points_awarded,
          'is_correct'     => $is_correct,
      ))
      ->condition('question_vid', $vid)
      ->condition('result_id', $result->result_id)
      ->execute();

    // Third, we update the main quiz results table
    if ($update_total) {
      quizz_result_controller()->getScoreIO()->updateTotalScore($result);
    }
  }
  return $changed;
}

/**
 * Submit the result report for short answer.
 *
 * @see ShortAnswerResponse::getReportFormSubmit(),
 */
function short_answer_report_submit($values) {
  $result = quizz_result_load($values['result_id']);
  short_answer_score_an_answer($result, $values, FALSE);
}

/**
 * Get the answer for a question.
 *
 * This stores a score for a short answer question and marks that question as having been evaluated.
 * @param $question_qid
 *  Node ID of question.
 * @param $question_vid
 *  Version ID of question.
 * @param $result_id
 *  Result ID for the quiz results.
 *
 * @return Assoc array
 *  An array if successful, or FALSE if no result could be found. The array contains the following properties:
 *  <code>
 *  answer_id; // The answer ID
 *  answer; // The full text of the answer
 *  is_evaluated; // 0 if the question has not been evaluated, 1 if it has
 *  score; // The score the evaluator gave the user; this should be 0 if is_evaluated is 0.
 *  question_vid
 *  question_qid
 *  result_id
 *  </code>
 */
function short_answer_get_answer($question_qid, $question_vid, $result_id) {
  $results = db_query('SELECT sa.answer_id, sa.answer, sa.is_evaluated, sa.score, sa.question_vid, sa.question_qid, sa.result_id, sa.answer_feedback, sa.answer_feedback_format, rel.max_score AS rel_max_score
    FROM {quiz_short_answer_user_answers} sa
    JOIN {quiz_results} qnr ON (sa.result_id = qnr.result_id)
    JOIN {quiz_relationship} rel ON (qnr.quiz_vid = rel.quiz_vid AND rel.question_vid = sa.question_vid)
    WHERE sa.question_qid = :question_id AND sa.question_vid = :qvid AND sa.result_id = :rid', array(
      ':question_id' => $question_qid,
      ':qvid'        => $question_vid,
      ':rid'         => $result_id))->fetchAssoc();
  return $results ? $results : FALSE;
}
